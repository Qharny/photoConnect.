import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:shared_preferences/shared_preferences.dart';

// Import your routes file
// import 'routes/app_routes.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Set preferred orientations
  await SystemChrome.setPreferredOrientations([
    DeviceOrientation.portraitUp,
    DeviceOrientation.portraitDown,
  ]);

  // Set system UI overlay style
  SystemChrome.setSystemUIOverlayStyle(
    const SystemUiOverlayStyle(
      statusBarColor: Colors.transparent,
      statusBarIconBrightness: Brightness.dark,
      systemNavigationBarColor: Colors.white,
      systemNavigationBarIconBrightness: Brightness.dark,
    ),
  );

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Student Portal',
      debugShowCheckedModeBanner: false,
      navigatorKey: NavigationService.navigatorKey,
      initialRoute: AppRoutes.home,
      onGenerateRoute: AppRoutes.onGenerateRoute,
      theme: ThemeData(
        primarySwatch: Colors.teal,
        primaryColor: const Color(0xFF16a47e),
        fontFamily: 'Roboto',
        visualDensity: VisualDensity.adaptivePlatformDensity,
        appBarTheme: const AppBarTheme(
          backgroundColor: Color(0xFF16a47e),
          foregroundColor: Colors.white,
          elevation: 0,
          centerTitle: true,
          systemOverlayStyle: SystemUiOverlayStyle(
            statusBarColor: Colors.transparent,
            statusBarIconBrightness: Brightness.light,
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: const Color(0xFF16a47e),
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Color(0xFF16a47e)),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: const BorderSide(color: Color(0xFF16a47e), width: 2),
          ),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        ),
        cardTheme: CardThemeData(
          elevation: 2,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
        bottomNavigationBarTheme: const BottomNavigationBarThemeData(
          selectedItemColor: Color(0xFF16a47e),
          unselectedItemColor: Colors.grey,
          type: BottomNavigationBarType.fixed,
        ),
      ),
      builder: (context, child) {
        return MediaQuery(
          data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),
          child: child!,
        );
      },
    );
  }
}

// Enhanced Route Configuration with Animation Types
enum RouteAnimation {
  slideRight,
  slideLeft,
  slideUp,
  slideDown,
  fade,
  scale,
  rotation,
  none,
}

class RouteConfig {
  final String path;
  final WidgetBuilder builder;
  final RouteAnimation animation;
  final Duration duration;
  final bool requiresAuth;

  const RouteConfig({
    required this.path,
    required this.builder,
    this.animation = RouteAnimation.slideRight,
    this.duration = const Duration(milliseconds: 300),
    this.requiresAuth = false,
  });
}

class AppRoutes {
  static const String login = '/login';
  static const String home = '/';
  static const String registration = '/registration';
  static const String paymentAndBills = '/payment-and-bills';
  static const String results = '/results';
  static const String lecturerAssessment = '/lecturer-assessment';
  static const String notification = '/notification';
  static const String profile = '/profile';
  static const String editProfile = '/edit-profile';
  static const String mySettings = '/settings';

  // Route configurations with different animations
  static final Map<String, RouteConfig> _routeConfigs = {
    login: RouteConfig(
      path: login,
      builder: (context) => const LoginPage(),
      animation: RouteAnimation.fade,
      duration: const Duration(milliseconds: 400),
    ),
    home: RouteConfig(
      path: home,
      builder: (context) => const HomePage(),
      animation: RouteAnimation.slideRight,
      requiresAuth: true,
    ),
    registration: RouteConfig(
      path: registration,
      builder: (context) => const RegistrationScreen(),
      animation: RouteAnimation.slideUp,
      duration: const Duration(milliseconds: 350),
    ),
    paymentAndBills: RouteConfig(
      path: paymentAndBills,
      builder: (context) => const BillsPaymentsScreen(),
      animation: RouteAnimation.slideLeft,
      requiresAuth: true,
    ),
    results: RouteConfig(
      path: results,
      builder: (context) => const ResultsScreen(),
      animation: RouteAnimation.scale,
      requiresAuth: true,
    ),
    lecturerAssessment: RouteConfig(
      path: lecturerAssessment,
      builder: (context) => const LecturerAssessmentScreen(),
      animation: RouteAnimation.slideDown,
      requiresAuth: true,
    ),
    notification: RouteConfig(
      path: notification,
      builder: (context) => const NotificationPage(),
      animation: RouteAnimation.slideUp,
      requiresAuth: true,
    ),
    profile: RouteConfig(
      path: profile,
      builder: (context) => const ProfilePage(),
      animation: RouteAnimation.slideRight,
      requiresAuth: true,
    ),
    editProfile: RouteConfig(
      path: editProfile,
      builder: (context) => const EditProfilePage(),
      animation: RouteAnimation.slideLeft,
      requiresAuth: true,
    ),
    mySettings: RouteConfig(
      path: mySettings,
      builder: (context) => const SettingsPage(),
      animation: RouteAnimation.rotation,
      requiresAuth: true,
    ),
  };

  static Route<dynamic>? onGenerateRoute(RouteSettings settings) {
    final routeConfig = _routeConfigs[settings.name];

    if (routeConfig == null) {
      return _createAnimatedRoute(
        builder: (context) => const NotFoundPage(),
        animation: RouteAnimation.fade,
        duration: const Duration(milliseconds: 300),
      );
    }

    Widget page = routeConfig.builder(settings.arguments as BuildContext? ??
        NavigationService.navigatorKey.currentContext!);

    if (routeConfig.requiresAuth) {
      page = AuthWrapper(child: page);
    }

    return _createAnimatedRoute(
      builder: (context) => page,
      animation: routeConfig.animation,
      duration: routeConfig.duration,
    );
  }

  static PageRoute _createAnimatedRoute({
    required WidgetBuilder builder,
    required RouteAnimation animation,
    required Duration duration,
  }) {
    switch (animation) {
      case RouteAnimation.slideRight:
        return SlideRoute(builder: builder, direction: SlideDirection.right, duration: duration);
      case RouteAnimation.slideLeft:
        return SlideRoute(builder: builder, direction: SlideDirection.left, duration: duration);
      case RouteAnimation.slideUp:
        return SlideRoute(builder: builder, direction: SlideDirection.up, duration: duration);
      case RouteAnimation.slideDown:
        return SlideRoute(builder: builder, direction: SlideDirection.down, duration: duration);
      case RouteAnimation.fade:
        return FadeRoute(builder: builder, duration: duration);
      case RouteAnimation.scale:
        return ScaleRoute(builder: builder, duration: duration);
      case RouteAnimation.rotation:
        return RotationRoute(builder: builder, duration: duration);
      case RouteAnimation.none:
        return MaterialPageRoute(builder: builder);
    }
  }
}

// Navigation Service for global navigation
class NavigationService {
  static final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  static Future<dynamic> navigateTo(String routeName, {Object? arguments}) {
    return navigatorKey.currentState!.pushNamed(routeName, arguments: arguments);
  }

  static Future<dynamic> navigateAndReplace(String routeName, {Object? arguments}) {
    return navigatorKey.currentState!.pushReplacementNamed(routeName, arguments: arguments);
  }

  static void goBack() {
    return navigatorKey.currentState!.pop();
  }

  static void goBackToRoot() {
    return navigatorKey.currentState!.popUntil((route) => route.isFirst);
  }
}

// Custom Route Classes with Different Animations
enum SlideDirection { left, right, up, down }

class SlideRoute extends PageRouteBuilder {
  final WidgetBuilder builder;
  final SlideDirection direction;
  final Duration duration;

  SlideRoute({
    required this.builder,
    required this.direction,
    this.duration = const Duration(milliseconds: 300),
  }) : super(
    pageBuilder: (context, animation, secondaryAnimation) => builder(context),
    transitionDuration: duration,
    reverseTransitionDuration: duration,
  );

  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    Offset begin;
    const Offset end = Offset.zero;

    switch (direction) {
      case SlideDirection.right:
        begin = const Offset(1.0, 0.0);
        break;
      case SlideDirection.left:
        begin = const Offset(-1.0, 0.0);
        break;
      case SlideDirection.up:
        begin = const Offset(0.0, 1.0);
        break;
      case SlideDirection.down:
        begin = const Offset(0.0, -1.0);
        break;
    }

    final tween = Tween(begin: begin, end: end).chain(
      CurveTween(curve: Curves.easeInOutCubic),
    );

    return SlideTransition(
      position: animation.drive(tween),
      child: child,
    );
  }
}

class FadeRoute extends PageRouteBuilder {
  final WidgetBuilder builder;
  final Duration duration;

  FadeRoute({
    required this.builder,
    this.duration = const Duration(milliseconds: 300),
  }) : super(
    pageBuilder: (context, animation, secondaryAnimation) => builder(context),
    transitionDuration: duration,
    reverseTransitionDuration: duration,
  );

  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    return FadeTransition(
      opacity: animation.drive(
        CurveTween(curve: Curves.easeInOut),
      ),
      child: child,
    );
  }
}

class ScaleRoute extends PageRouteBuilder {
  final WidgetBuilder builder;
  final Duration duration;

  ScaleRoute({
    required this.builder,
    this.duration = const Duration(milliseconds: 300),
  }) : super(
    pageBuilder: (context, animation, secondaryAnimation) => builder(context),
    transitionDuration: duration,
    reverseTransitionDuration: duration,
  );

  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    return ScaleTransition(
      scale: animation.drive(
        CurveTween(curve: Curves.elasticOut),
      ),
      child: child,
    );
  }
}

class RotationRoute extends PageRouteBuilder {
  final WidgetBuilder builder;
  final Duration duration;

  RotationRoute({
    required this.builder,
    this.duration = const Duration(milliseconds: 300),
  }) : super(
    pageBuilder: (context, animation, secondaryAnimation) => builder(context),
    transitionDuration: duration,
    reverseTransitionDuration: duration,
  );

  @override
  Widget buildTransitions(BuildContext context, Animation<double> animation,
      Animation<double> secondaryAnimation, Widget child) {
    return RotationTransition(
      turns: animation.drive(
        Tween<double>(begin: 0.0, end: 1.0).chain(
          CurveTween(curve: Curves.elasticOut),
        ),
      ),
      child: FadeTransition(
        opacity: animation,
        child: child,
      ),
    );
  }
}

// Enhanced Authentication Wrapper with Loading Animation
class AuthWrapper extends StatefulWidget {
  final Widget child;

  const AuthWrapper({super.key, required this.child});

  @override
  State<AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<AuthWrapper> with TickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );
    _animation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );
    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: _checkAuthStatus(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Scaffold(
            backgroundColor: Colors.white,
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  AnimatedBuilder(
                    animation: _animation,
                    builder: (context, child) {
                      return Transform.scale(
                        scale: 0.8 + (_animation.value * 0.2),
                        child: Container(
                          width: 80,
                          height: 80,
                          decoration: BoxDecoration(
                            color: const Color(0xFF16a47e),
                            borderRadius: BorderRadius.circular(40),
                            boxShadow: [
                              BoxShadow(
                                color: const Color(0xFF16a47e).withOpacity(0.3),
                                blurRadius: 20,
                                spreadRadius: 5,
                              ),
                            ],
                          ),
                          child: const Icon(
                            Icons.school,
                            color: Colors.white,
                            size: 40,
                          ),
                        ),
                      );
                    },
                  ),
                  const SizedBox(height: 30),
                  const Text(
                    'Student Portal',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF16a47e),
                    ),
                  ),
                  const SizedBox(height: 10),
                  const Text(
                    'Verifying Authentication...',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.grey,
                      fontWeight: FontWeight.w400,
                    ),
                  ),
                ],
              ),
            ),
          );
        }

        if (snapshot.data == true) {
          return widget.child;
        } else {
          // Not authenticated, redirect to login
          WidgetsBinding.instance.addPostFrameCallback((_) {
            Navigator.pushReplacementNamed(context, AppRoutes.login);
          });
          return const Scaffold(
            backgroundColor: Colors.white,
            body: Center(
              child: CircularProgressIndicator(
                color: Color(0xFF16a47e),
              ),
            ),
          );
        }
      },
    );
  }

  Future<bool> _checkAuthStatus() async {
    // Simulate network delay
    await Future.delayed(const Duration(milliseconds: 1500));
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('is_logged_in') ?? false;
  }
}

// Not Found Page
class NotFoundPage extends StatelessWidget {
  const NotFoundPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Page Not Found'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => NavigationService.goBack(),
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.error_outline,
              size: 100,
              color: Colors.grey,
            ),
            const SizedBox(height: 20),
            const Text(
              '404',
              style: TextStyle(
                fontSize: 48,
                fontWeight: FontWeight.bold,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 10),
            const Text(
              'Page Not Found',
              style: TextStyle(
                fontSize: 20,
                color: Colors.grey,
              ),
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () => NavigationService.navigateAndReplace(AppRoutes.home),
              child: const Text('Go to Home'),
            ),
          ],
        ),
      ),
    );
  }
}

// Sample Pages (Replace with your actual implementations)
class LoginPage extends StatelessWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const Icon(
                Icons.school,
                size: 100,
                color: Color(0xFF16a47e),
              ),
              const SizedBox(height: 30),
              const Text(
                'Student Portal',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF16a47e),
                ),
              ),
              const SizedBox(height: 40),
              const TextField(
                decoration: InputDecoration(
                  labelText: 'Student ID',
                  prefixIcon: Icon(Icons.person),
                ),
              ),
              const SizedBox(height: 20),
              const TextField(
                obscureText: true,
                decoration: InputDecoration(
                  labelText: 'Password',
                  prefixIcon: Icon(Icons.lock),
                ),
              ),
              const SizedBox(height: 30),
              ElevatedButton(
                onPressed: () async {
                  final prefs = await SharedPreferences.getInstance();
                  await prefs.setBool('is_logged_in', true);
                  NavigationService.navigateAndReplace(AppRoutes.home);
                },
                child: const Text('Login'),
              ),
              const SizedBox(height: 20),
              TextButton(
                onPressed: () => NavigationService.navigateTo(AppRoutes.registration),
                child: const Text('Create Account'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class HomePage extends StatelessWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard'),
        actions: [
          IconButton(
            icon: const Icon(Icons.notifications),
            onPressed: () => NavigationService.navigateTo(AppRoutes.notification),
          ),
          IconButton(
            icon: const Icon(Icons.person),
            onPressed: () => NavigationService.navigateTo(AppRoutes.profile),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: GridView.count(
          crossAxisCount: 2,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
          children: [
            _buildDashboardCard(
              context,
              'Results',
              Icons.assessment,
                  () => NavigationService.navigateTo(AppRoutes.results),
            ),
            _buildDashboardCard(
              context,
              'Payments',
              Icons.payment,
                  () => NavigationService.navigateTo(AppRoutes.paymentAndBills),
            ),
            _buildDashboardCard(
              context,
              'Assessment',
              Icons.rate_review,
                  () => NavigationService.navigateTo(AppRoutes.lecturerAssessment),
            ),
            _buildDashboardCard(
              context,
              'Settings',
              Icons.settings,
                  () => NavigationService.navigateTo(AppRoutes.mySettings),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          final prefs = await SharedPreferences.getInstance();
          await prefs.setBool('is_logged_in', false);
          NavigationService.navigateAndReplace(AppRoutes.login);
        },
        backgroundColor: const Color(0xFF16a47e),
        child: const Icon(Icons.logout),
      ),
    );
  }

  Widget _buildDashboardCard(
      BuildContext context,
      String title,
      IconData icon,
      VoidCallback onTap,
      ) {
    return Card(
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 48,
                color: const Color(0xFF16a47e),
              ),
              const SizedBox(height: 12),
              Text(
                title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Placeholder pages - replace with your actual implementations
class RegistrationScreen extends StatelessWidget {
  const RegistrationScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Registration')),
    body: const Center(child: Text('Registration Screen')),
  );
}

class BillsPaymentsScreen extends StatelessWidget {
  const BillsPaymentsScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Bills & Payments')),
    body: const Center(child: Text('Bills & Payments Screen')),
  );
}

class ResultsScreen extends StatelessWidget {
  const ResultsScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Results')),
    body: const Center(child: Text('Results Screen')),
  );
}

class LecturerAssessmentScreen extends StatelessWidget {
  const LecturerAssessmentScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Lecturer Assessment')),
    body: const Center(child: Text('Lecturer Assessment Screen')),
  );
}

class NotificationPage extends StatelessWidget {
  const NotificationPage({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Notifications')),
    body: const Center(child: Text('Notifications Page')),
  );
}

class ProfilePage extends StatelessWidget {
  const ProfilePage({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Profile')),
    body: const Center(child: Text('Profile Page')),
  );
}

class EditProfilePage extends StatelessWidget {
  const EditProfilePage({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Edit Profile')),
    body: const Center(child: Text('Edit Profile Page')),
  );
}

class SettingsPage extends StatelessWidget {
  const SettingsPage({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Settings')),
    body: const Center(child: Text('Settings Page')),
  );
}