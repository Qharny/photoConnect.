Here’s the **Supabase SQL schema and RLS policies** for your **PhotoConnect** app. It covers all major features: users, roles, photographers, clients, portfolios, bookings, reviews, and likes.

---

## 🛠️ **1. Tables + SQL Structure**

### ✅ **1.1 roles**

```sql
create table roles (
  id uuid primary key default gen_random_uuid(),
  name text unique not null  -- 'photographer' or 'client'
);
```

---

### ✅ **1.2 profiles** (for both clients and photographers)

```sql
create table profiles (
  id uuid primary key references auth.users on delete cascade,
  full_name text,
  professional_name text,         -- for photographers
  email text,
  role_id uuid references roles(id),
  phone text,
  location text,
  specialties text[],             -- array of strings
  bio text,
  years_of_experience int,
  profile_image text,             -- URL
  created_at timestamp default now()
);
```

---

### ✅ **1.3 portfolios**

```sql
create table portfolios (
  id uuid primary key default gen_random_uuid(),
  photographer_id uuid references profiles(id) on delete cascade,
  image_url text not null,
  category text,
  is_featured boolean default false,
  created_at timestamp default now()
);
```

---

### ✅ **1.4 bookings**

```sql
create table bookings (
  id uuid primary key default gen_random_uuid(),
  client_id uuid references profiles(id),
  photographer_id uuid references profiles(id),
  date timestamp not null,
  service_package text,
  price numeric,
  status text default 'pending', -- pending, approved, rejected, cancelled
  created_at timestamp default now()
);
```

---

### ✅ **1.5 reviews**

```sql
create table reviews (
  id uuid primary key default gen_random_uuid(),
  booking_id uuid references bookings(id),
  client_id uuid references profiles(id),
  photographer_id uuid references profiles(id),
  rating int check (rating >= 1 and rating <= 5),
  comment text,
  created_at timestamp default now()
);
```

---

### ✅ **1.6 likes**

```sql
create table likes (
  id uuid primary key default gen_random_uuid(),
  profile_id uuid references profiles(id),
  portfolio_id uuid references portfolios(id),
  created_at timestamp default now()
);
```

---

## 🔐 **2. Row-Level Security (RLS) Policies**

> Enable RLS on all tables:

```sql
alter table profiles enable row level security;
alter table portfolios enable row level security;
alter table bookings enable row level security;
alter table reviews enable row level security;
alter table likes enable row level security;
```

---

### 🔒 **Profiles Table Policy**

```sql
create policy "Allow users to manage their profile"
on profiles
for all
using (auth.uid() = id)
with check (auth.uid() = id);
```

---

### 🔒 **Portfolios Table Policy**

```sql
create policy "Photographers manage their own portfolio"
on portfolios
for all
using (auth.uid() = photographer_id)
with check (auth.uid() = photographer_id);
```

---

### 🔒 **Bookings Table Policies**

```sql
create policy "Photographers and clients can view their bookings"
on bookings
for select
using (
  auth.uid() = photographer_id OR auth.uid() = client_id
);

create policy "Clients can create bookings"
on bookings
for insert
with check (auth.uid() = client_id);

create policy "Photographers and clients can update their bookings"
on bookings
for update
using (auth.uid() = photographer_id OR auth.uid() = client_id);
```

---

### 🔒 **Reviews Table Policies**

```sql
create policy "Clients can write reviews"
on reviews
for insert
with check (auth.uid() = client_id);

create policy "Photographers and clients can read reviews"
on reviews
for select
using (true);
```

---

### 🔒 **Likes Table Policies**

```sql
create policy "Users can like portfolios"
on likes
for insert
with check (auth.uid() = profile_id);

create policy "Users can view likes"
on likes
for select
using (true);
```

---

## 🧪 Optional Seed Data

```sql
insert into roles (name) values ('photographer'), ('client');
```
