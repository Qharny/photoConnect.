## 🧱 **📸 Supabase SQL Schema: PhotoConnect**

---

### ✅ 1. `profiles` (Shared user table)

```sql
create table profiles (
  id uuid primary key references auth.users on delete cascade,
  role text check (role in ('photographer', 'client')),
  full_name text,
  email text,
  profile_picture text, -- Supabase Storage URL
  phone text,
  created_at timestamp with time zone default now()
);
```

---

### ✅ 2. `photographers`

```sql
create table photographers (
  id uuid primary key references profiles(id) on delete cascade,
  professional_name text,
  bio text,
  specialties text[], -- e.g. ['wedding', 'portrait']
  location text,
  years_of_experience int,
  rate numeric, -- hourly or flat rate
  availability jsonb, -- e.g. {"mon": "9am-5pm", "sat": "off"}
  created_at timestamp with time zone default now()
);
```

---

### ✅ 3. `portfolios`

```sql
create table portfolios (
  id uuid primary key default gen_random_uuid(),
  photographer_id uuid references photographers(id) on delete cascade,
  image_url text,
  caption text,
  category text,
  is_featured boolean default false,
  created_at timestamp with time zone default now()
);
```

---

### ✅ 4. `clients`

```sql
create table clients (
  id uuid primary key references profiles(id) on delete cascade,
  created_at timestamp with time zone default now()
);
```

---

### ✅ 5. `bookings`

```sql
create table bookings (
  id uuid primary key default gen_random_uuid(),
  client_id uuid references clients(id) on delete cascade,
  photographer_id uuid references photographers(id) on delete cascade,
  service text,
  date_time timestamp,
  status text check (status in ('pending', 'approved', 'rejected', 'cancelled')) default 'pending',
  message text,
  price numeric,
  created_at timestamp with time zone default now()
);
```

---

### ✅ 6. `reviews`

```sql
create table reviews (
  id uuid primary key default gen_random_uuid(),
  booking_id uuid references bookings(id) on delete cascade,
  client_id uuid references clients(id) on delete cascade,
  photographer_id uuid references photographers(id) on delete cascade,
  rating int check (rating >= 1 and rating <= 5),
  comment text,
  created_at timestamp with time zone default now()
);
```

---

## 🔐 Row-Level Security (RLS) Policies

### 1. Enable RLS

```sql
alter table profiles enable row level security;
alter table photographers enable row level security;
alter table clients enable row level security;
alter table portfolios enable row level security;
alter table bookings enable row level security;
alter table reviews enable row level security;
```

---

### 2. Profiles Policies

```sql
create policy "Users can read their profile"
on profiles for select
using (auth.uid() = id);

create policy "Users can insert their profile"
on profiles for insert
with check (auth.uid() = id);

create policy "Users can update their profile"
on profiles for update
using (auth.uid() = id);
```

---

### 3. Photographer & Client Role Policies

```sql
-- Photographer table
create policy "Photographers can manage their own data"
on photographers for all
using (auth.uid() = id);

-- Client table
create policy "Clients can manage their own data"
on clients for all
using (auth.uid() = id);
```

---

### 4. Portfolios Policies

```sql
create policy "Photographers can view their own portfolio"
on portfolios for select
using (auth.uid() = photographer_id);

create policy "Photographers can add images"
on portfolios for insert
with check (auth.uid() = photographer_id);

create policy "Photographers can update/delete their images"
on portfolios for update, delete
using (auth.uid() = photographer_id);
```

---

### 5. Bookings Policies

```sql
create policy "Photographers & clients can view related bookings"
on bookings for select
using (
  auth.uid() = client_id or
  auth.uid() = photographer_id
);

create policy "Clients can create bookings"
on bookings for insert
with check (auth.uid() = client_id);

create policy "Photographers can update booking status"
on bookings for update
using (auth.uid() = photographer_id);

create policy "Clients can cancel bookings"
on bookings for update
using (auth.uid() = client_id);
```

---

### 6. Reviews Policies

```sql
create policy "Clients can write reviews"
on reviews for insert
with check (auth.uid() = client_id);

create policy "Clients and photographers can view reviews"
on reviews for select
using (
  auth.uid() = client_id or
  auth.uid() = photographer_id
);
```

---

## 🧺 Supabase Storage Buckets

### Suggested Buckets:

* `profile-pictures/`
* `portfolio-images/`

### In Flutter:

Use `supabase.storage.from('portfolio-images').upload(...)` to upload files and save the `publicUrl()` in your `portfolios` table.

---

Would you like me to generate this as a `.sql` file you can import directly into Supabase?
